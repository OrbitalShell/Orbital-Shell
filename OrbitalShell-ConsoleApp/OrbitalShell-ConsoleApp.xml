<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrbitalShell-ConsoleApp</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:OrbitalShell.App" -->
        <member name="T:OrbitalShell.Component.Console.ANSI">
            <summary>
            all ANSI codes that we take into account for the targetted terminals referential
            from https://en.wikipedia.org/wiki/ANSI_escape_code
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.DECSC">
            <summary>
            backup cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.DECRC">
            <summary>
            restore cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.RIS">
            <summary>
            Triggers a full reset of the terminal to its original state. This may include (if applicable): reset graphic rendition, clear tabulation stops, reset to default font, and more.
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.RSTXTA">
            <summary>
            RESET TEXT ATTRIBUTES : console background (if transparency preserved), text attributes (uon,tdoff)
            this tip allow to force the background color restoration without filling it
            this tip properly and completely clean-up the text attributes
            you should wait after launch this seq about about 25ms before it is efficient (vscode debug console)
            </summary>        
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.RSCOLDEF">
            <summary>
            reset terminal colors (foreground and background) to their default (not supported on some terminals)
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CUU(System.Int32)">
            <summary>
            Cursor Up - Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.
            </summary>
            <param name="n">number of cells</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CUD(System.Int32)">
            <summary>
            Cursor Down - Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.
            </summary>
            <param name="n">number of cells</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CUF(System.Int32)">
            <summary>
            Cursor Forward - Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.
            </summary>
            <param name="n">number of cells</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CUB(System.Int32)">
            <summary>
            Cursor Back - Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.
            </summary>
            <param name="n">number of cells</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CNL(System.Int32)">
            <summary>
            Cursor Next Line - Moves cursor to beginning of the line n (default 1) lines down. (not ANSI.SYS)
            </summary>
            <param name="n">line downs count</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CPL(System.Int32)">
            <summary>
            Cursor Previous Line - Moves cursor to beginning of the line n (default 1) lines up. (not ANSI.SYS)
            </summary>
            <param name="n">line up count</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CHA(System.Int32)">
            <summary>
            Cursor Horizontal Absolute - Moves the cursor to column n (default 1). (not ANSI.SYS)
            </summary>
            <param name="n">column index</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.CUP(System.Int32,System.Int32)">
            <summary>
            Cursor Position - Moves the cursor to row n, column m. The values are 1-based, and default to 1 (top left corner) if omitted. A sequence such as CSI ;5H is a synonym for CSI 1;5H as well as CSI 17;H is the same as CSI 17H and CSI 17;1H
            </summary>
            <param name="row">row index</param>
            <param name="column">column index</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SU(System.Int32)">
            <summary>
            Scroll Up - Scroll whole page up by n (default 1) lines. New lines are added at the bottom. (not ANSI.SYS)
            </summary>
            <param name="n">lines count</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SD(System.Int32)">
            <summary>
            Scroll Down - Scroll whole page down by n (default 1) lines. New lines are added at the top. (not ANSI.SYS)
            </summary>
            <param name="n">lines count</param>
            <returns>ansi seq</returns>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.DSR">
            <summary>
            Device Status Report - Reports the cursor position (CPR) to the application as (as though typed at the keyboard) ESC[n;mR, where n is the row and m is the column.)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.EDParameter.p0">
            <summary>
            If n is 0 (or missing), clear from cursor to end of screen
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.EDParameter.p1">
            <summary>
            If n is 1, clear from cursor to beginning of the screen
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.EDParameter.p2">
            <summary>
             If n is 2, clear entire screen (and moves cursor to upper left on DOS ANSI.SYS).
            (partial support)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.EDParameter.p3">
            <summary>
             If n is 3, clear entire screen and delete all lines saved in the scrollback buffer (this feature was added for xterm and is supported by other terminal applications).
            (low support)
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.ED(OrbitalShell.Component.Console.ANSI.EDParameter)">
            <summary>
            Erases part of the screen
            </summary>
            <param name="n">EDparameter</param>
            <returns>ansi seq</returns>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.ELParameter.p0">
            <summary>
            if is 0 (or missing), clear from cursor to the end of the line
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.ELParameter.p1">
            <summary>
            If n is 1, clear from cursor to beginning of the line.
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Console.ANSI.ELParameter.p2">
            <summary>
            If n is 2, clear entire line. Cursor position does not change.
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.EL(OrbitalShell.Component.Console.ANSI.ELParameter)">
            <summary>
            Erases part of the line
            </summary>
            <param name="n">ELparameter</param>
            <returns>ansi seq</returns> 
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_Reset">
            <summary>
            Reset / Normal - All attributes off (not always efficient on many terminals. @see combo RSTXTA)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_IncreasedIntensity">
            <summary>
            Bold or increased intensity - As with faint, the color change is a PC (SCO / CGA) invention.
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_DecreaseIntensity">
            <summary>
            Faint or decreased intensity - aka Dim (with a saturated color). May be implemented as a light font weight like bold.
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_Italic">
            <summary>
            Italic - Not widely supported. Sometimes treated as inverse or blink. (not windows terminal, probably not ANSY.SYS, but ok on vscode debuger)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_Underline">
            <summary>
            Underline - Style extensions exist for Kitty, VTE, mintty and iTerm2.
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_SlowBlink">
            <summary>
            Slow Blink - less than 150 per minute (not vscode debuger, ok with windows terminal )
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_RapidBlink">
            <summary>
            Rapid Blink - MS-DOS ANSI.SYS, 150+ per minute; not widely supported (not vscode debuger, ok with windows terminal. Same blink speed than SlowBlink)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_ReverseVideo">
            <summary>
            Reverse video - swap foreground and background colors, aka invert; inconsistent emulation (swap console default colors, not assignable by shell in full ansi)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_ItalicOff">
            <summary>
            Italic off
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_UnderlineOff">
            <summary>
            Underline off - Not singly or doubly underlined
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_BlinkOff">
            <summary>
            Blink off
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_ReverseOff">
            <summary>
            Reverse/invert off
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_NotCrossedOut">
            <summary>
            Not crossed out
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_CrossedOut">
            <summary>
            Crossed-out - aka Strike, characters legible but marked as if for deletion. (do nothing on vscode debuger, works on windows terminal)
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_DoubleUnderline">
            <summary>
            Doubly underline or Bold off - Double-underline per ECMA-48.
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="P:OrbitalShell.Component.Console.ANSI.SGR_NormalIntensity">
            <summary>
            Normal color or intensity - Neither bold nor faint
            </summary>
            <returns>ansi seq</returns>
        </member>
        <member name="T:OrbitalShell.Component.Console.ANSI.SGR_4BitsColors">
            <summary>
            SGR_4BitsColors parameter values for SGR_SetForegroundColor4bits and SGR_SetBackgroundColor4bits
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetForegroundColor4bits(OrbitalShell.Component.Console.ANSI.SGR_4BitsColors,System.Boolean)">
            <summary>
            Set foreground color - 3/4 bits palette mode (8 normal colors + 8 bright colors)
            <para>bright black is gray or darkgray, white is gray or light gray, bright white is white. That depends on console palette</para>
            </summary>
            <param name="color">SGR_4BitsColors</param>
            <param name="bright">enable bright 8 additional color set (bright colors)</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SGRF(System.Object)">
            <summary>
            Set foreground color - 3/4 bits palette mode (8 normal colors + 8 bright colors)
            <para>bright black is gray or darkgray, white is gray or light gray, bright white is white. That depends on console palette</para>
            <para>format is {n}[,bright] with n from any name in SGR_4BitsColors (both args not in sensitive case). if ,bright is added, the color refers to the 8 colors additional palette - for example Black,bright or red</para>
            <param name="s">{n}[,bright]</param>
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.ParseSGR_4BitsColor(System.String)">
            <summary>
            format is {n}[,bright] with n from any name in SGR_4BitsColors (both args not in sensitive case). if ,bright is added, the color refers to the 8 colors additional palette - for example Black,bright or red
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetForegroundColor8bits(System.Int32)">
            <summary>
            set foreground color - 8 bits palette (256 colors)
            <para>0-  7:  standard colors (as in ESC [ 30–37 m, see SGR_4BitsColors)<br/>
            8- 15:  high intensity colors (as in ESC [ 90–97 m, see SGR_4BitsColors bright)<br/>
            16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)<br/>
            232-255:  grayscale from black to white in 24 steps</para>
            </summary>
            <param name="n">palette color index</param>
            <returns>ansi seq</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OrbitalShell.Component.Console.ANSI.SGRF8(System.Object)" -->
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetForegroundColor24bits(System.Int32,System.Int32,System.Int32)">
            <summary>
            set foreground color - 24 bits 'true color' (for 16 or 24 bits palette graphic cards)
            <para>parameters are red,green,blue luminosity from 0 to 255</para>
            </summary>
            <param name="r">red: 0 to 255</param>
            <param name="g">green: 0 to 255</param>
            <param name="b">blue: 0 to 255</param>
            <returns>ansi seq</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OrbitalShell.Component.Console.ANSI.SGRF24(System.Object)" -->
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetBackgroundColor4bits(OrbitalShell.Component.Console.ANSI.SGR_4BitsColors,System.Boolean)">
            <summary>
            Set background color - 3/4 bits palette mode (8 normal colors + 8 bright colors)
            <para>bright black is gray or darkgray, white is gray or light gray, bright white is white. That depends on console palette</para>
            </summary>
            <param name="color">SGR_4BitsColors</param>
            <param name="bright">enable bright 8 additional color set (sames colors in bright)</param>
            <returns>ansi seq</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SGRB(System.Object)">
            <summary>
            Set background color - 3/4 bits palette mode (8 normal colors + 8 bright colors)
            <para>bright black is gray or darkgray, white is gray or light gray, bright white is white. That depends on console palette</para>
            <para>format is {n}[,bright] with n from any name in SGR_4BitsColors (both args not in sensitive case). if ,bright is added, the color refers to the 8 colors additional palette - for example Black,bright or red</para>
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetBackgroundColor8bits(System.Int32)">
            <summary>
            set background color - 8 bits palette (256 colors)
            <para>0-  7:  standard colors (as in ESC [ 30–37 m, see SGR_4BitsColors)<br/>
            8- 15:  high intensity colors (as in ESC [ 90–97 m, see SGR_4BitsColors bright)<br/>
            16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)<br/>
            232-255:  grayscale from black to white in 24 steps</para>
            </summary>
            <param name="n">palette color index</param>
            <returns>ansi seq</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OrbitalShell.Component.Console.ANSI.SGRB8(System.Object)" -->
        <member name="M:OrbitalShell.Component.Console.ANSI.SGR_SetBackgroundColor24bits(System.Int32,System.Int32,System.Int32)">
            <summary>
            set background color - 24 bits 'true color' (for 16 or 24 bits palette graphic cards)
            <para>parameters are red,green,blue luminosity from 0 to 255</para>
            </summary>
            <param name="r">red: 0 to 255</param>
            <param name="g">green: 0 to 255</param>
            <param name="b">blue: 0 to 255</param>
            <returns>ansi seq</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OrbitalShell.Component.Console.ANSI.SGRB24(System.Object)" -->
        <member name="M:OrbitalShell.Component.Console.ANSI.Set4BitsColors(System.Int32,System.Int32)">
            <summary>
            set colors from 4 bit index ( To3BitColorIndex(ConsoleColor) ). (@TODO: check {CSI}0m removed from bg begin)
            </summary>
            <param name="foregroundNum"></param>
            <param name="backgroundNum"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.GetTextLength(System.String)">
            <summary>
            get the real length of the text without ansi sequences non printed characters
            </summary>
            <returns>length of visible part of the text</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.GetText(System.String)">
            <summary>
            gets the text part of the syntactic elements
            </summary>
            <returns>string without ansi sequences</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ANSI.StartsWithANSISequence(System.String)">
            <summary>
            TODO: returns true if the sequence starts by a ANSI sequence
            <para>from https://en.wikipedia.org/wiki/ANSI_escape_code</para>
            </summary>
            <param name="s">string to be analyzed</param>
            <returns>several information about any ansi sequence or not</returns>
        </member>
        <member name="T:OrbitalShell.Component.Console.ASCII">
            <summary>
            all ASCII codes that we take into account for the targetted terminals referential
            from https://en.wikipedia.org/wiki/ANSI_escape_code
            </summary>
        </member>
        <member name="T:OrbitalShell.Component.Console.Color4BitMap">
            <summary>
            4 bits colors map - see https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
            </summary>
        </member>
        <member name="P:OrbitalShell.Component.Console.ColorSettings.Default">
            <summary>
            defaults shell foreground and background - if is setted. designed to preserve console default background transparency
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.Init(OrbitalShell.Component.Console.IConsole,OrbitalShell.Component.Script.CSharpScriptEngine)">
            <summary>
            shell init
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.BackupForeground">
            <summary>
            backup the current 3bit foreground color
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.BackupBackground">
            <summary>
            backup the current 3bit background color
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetForeground(System.Nullable{System.ConsoleColor})">
            <summary>
            set foreground color from a 3 bit palette color (ConsoleColor to ansi)
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetForeground(System.Int32)">
            <summary>
            set foreground color from a 8 bit palette color (vt/ansi)
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetBackground(System.Int32)">
            <summary>
            set background color from a 8 bit palette color (vt/ansi)
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            set foreground color from a 24 bit palette color (vt/ansi)
            </summary>
            <param name="r">red from 0 to 255</param>
            <param name="g">green from 0 to 255</param>
            <param name="b">blue from 0 to 255</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            set background color from a 24 bit palette color (vt/ansi)
            </summary>
            <param name="r">red from 0 to 255</param>
            <param name="g">green from 0 to 255</param>
            <param name="b">blue from 0 to 255</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.RestoreDefaultColors">
            <summary>
            use RSTXTA to force colors set to defaults (avoid to reset to transparency colors)
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.RestoreCursorPos">
            <summary>
            compat problem on low ansi
            </summary>
        </member>
        <member name="P:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.CursorLeft">
            <summary>
            get/set cursor column
            </summary>
        </member>
        <member name="P:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.CursorTop">
            <summary>
            get/set cursor top
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            set cursor pos - @[y+1;x+1H
            </summary>
            <param name="x">x (origine 0)</param>
            <param name="y">y (origine 0)</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.GetText(System.String)">
            <summary>
            text only, no print directives, no ansi
            </summary>
            <param name="s">text to be filtered</param>
            <returns>text visible characters only</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.EchoDebug(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            debug echo to file
            </summary>
            <param name="s"></param>
            <param name="lineBreak"></param>
            <param name="callerMemberName"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.Echo(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OrbitalShell.Component.Console.EchoSequenceList,System.Boolean,System.Boolean)">
            <summary>
            output to stream
            </summary>
            <param name="o">object to output - is transform to string with ToText</param>
            <param name="lineBreak">if true, append a line break to output (call LineBreak()), default is false</param>
            <param name="preserveColors">TODO: remove this parameter</param>
            <param name="parseCommands">if true, echo directives are parsed and evaluated, default is true</param>
            <param name="doNotEvalutatePrintDirectives">TODO: explain this parameter</param>
            <param name="printSequences">to store echo sequence objects when collected</param>
            <param name="avoidANSISequencesAndNonPrintableCharacters">if true and parseCommands=false, replace ansiseq and non printable chars by readable data</param>
            <param name="getNonPrintablesASCIICodesAsLabel">if true and parseCommands=false, replace ascii non printables chars by labels</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.GetWorkAreaStringSplits(System.String,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            TODO: check for buffered mode
            </summary>
            <param name="s"></param>
            <param name="origin"></param>
            <param name="forceEnableConstraintInWorkArea"></param>
            <param name="fitToVisibleArea"></param>
            <param name="doNotEvaluatePrintDirectives"></param>
            <param name="ignorePrintDirectives"></param>
            <param name="cursorX"></param>
            <param name="cursorY"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.ConsoleTextWriterWrapper.SetCursorPosConstraintedInWorkArea(System.Int32@,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            TODO: check for buffered mode
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="enableOutput"></param>
            <param name="forceEnableConstraintInWorkArea"></param>
            <param name="fitToVisibleArea"></param>
        </member>
        <member name="F:OrbitalShell.Component.Console.InputMap.MatchInput">
            <summary>
            -1 : no match, 0 : exact match , 1: partial match
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.StringSegment.ToString">
            <summary>
            warn: this is intensively used in error messages...
            </summary>
            <returns>text representation of a StringSegment</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextColor.ParseColor(OrbitalShell.Component.Console.IConsole,System.Object)">
            <summary>
            parse a 4 bit color
            </summary>
            <param name="c">text of color name</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextColor.Parse8BitColor(OrbitalShell.Component.Console.IConsole,System.Object)">
            <summary>
            parse a 8 bit color
            </summary>
            <param name="c">string representing an integer in range 0..255 (included)</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OrbitalShell.Component.Console.TextColor.Parse24BitColor(OrbitalShell.Component.Console.IConsole,System.Object)" -->
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.StartRecording">
            <summary>
            enable recording the stream in a string builder. clear the record on start
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.StopRecording">
            <summary>
            stop recording the stream. returns &amp; clear the record
            </summary>
            <returns>what has been recorded</returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.Capture">
            <summary>
            capture the output stream to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.ReplicateToMem(System.Boolean)">
            <summary>
            echo Out to a memory stream
            </summary>
            <param name="autoFlush"></param>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.ReplicateToFile(System.String,System.Boolean)">
            <summary>
            echo Out to a file
            </summary>
            <param name="filepath">file path where to echo Out</param>
            <param name="autoFlush">if set, flush Out before each echo</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.Write(System.String)">
            <summary>
            writes a string to the stream
            </summary>
            <param name="s">string to be written to the stream</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.WriteAsync(System.String)">
            <summary>
            writes a string to the stream
            </summary>
            <param name="s">string to be written to the stream</param>
        </member>
        <member name="M:OrbitalShell.Component.Console.TextWriterWrapper.WriteLine(System.String)">
            <summary>
            writes a string to the stream
            </summary>
            <param name="s">string to be written to the stream</param>
        </member>
        <member name="T:OrbitalShell.Component.Console.Unicode">
            <summary>
            unicode characters
            </summary>
        </member>
        <member name="T:OrbitalShell.Component.EchoDirective.CommandMap">
            <summary>
            these map attribute a echo command delegate to an echo directive syntax
            </summary>
        </member>
        <member name="T:OrbitalShell.Component.EchoDirective.EchoDirectiveProcessor">
            <summary>
            echo directives processor
            <para>&#9989; drives directly the writer (simple approach to execute print directives)</para>
            </summary>
        </member>
        <member name="T:OrbitalShell.Component.EchoDirective.EchoDirectives">
             <summary>
             <para>
             naming conventions:<br/>
             &#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;<br/>
             &#9889; echo directives names are in lower case<br/>
             &#9889; excepted ANSI sequences directives names that are in upper case<br/>
             &#9889; excepted Unicode characters names that are in camel case<br/>
             </para>
             <para>
             &#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;<br/>
             &#128309; constants by category:<br/>
             &#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;<br/>
             &#128313; Specials caracters:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473; <br/>
             
                 ESC<br/>
                 CRLF<br/>
                 CSI<br/>
             
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; ANSI sequences<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             
             DECSC<br/>
             DECRC<br/>
             RIS<br/>
             RSTXTA<br/>
             RSCOLDEF<br/>
             CUU<br/>
             CUD<br/>
             CUF<br/>
             CUB<br/>
             CNL<br/>
             CPL<br/>
             CHA<br/>
             CUP<br/>
             SU<br/>
             SD<br/>
             DSR<br/>
             ED<br/>
             EL<br/>
             SGR_Reset<br/>
             SGR_IncreasedIntensity<br/>
             SGR_DecreaseIntensity<br/>
             SGR_Italic<br/>
             SGR_Underline<br/>
             SGR_SlowBlink<br/>
             SGR_RapidBlink<br/>
             SGR_ReverseVideo<br/>
             SGR_ItalicOff<br/>
             SGR_UnderlineOff<br/>
             SGR_BlinkOff<br/>
             SGR_ReverseOff<br/>
             SGR_NotCrossedOut<br/>
             SGR_CrossedOut<br/>
             SGR_DoubleUnderline<br/>
             SGR_NormalIntensity<br/>
             SGRF<br/>
             SGRF8<br/>
             SGRF24<br/>
             SGRB<br/>
             SGRB8<br/>
             SGRB24<br/>
             
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; colors:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             
                   f=consoleColor:   set foreground<br/>
                   b=consoleColor:   set background<br/>
                   df=consoleColor:  set default foreground<br/>
                   db=consoleColor:  set default background<br/>
                   bkf:              backup foreground<br/>
                   bkb:              backup background<br/>
                   rsf:              restore foreground<br/>
                   rsb:              restore background<br/>
                   rdc:              set colors to defaults<br/>
                   consoleColor (case insensitive) := black | darkblue | darkgreen | darkcyan | darkred  | darkmagenta | darkyellow | gray | darkgray  | blue | green | cyan  | red  | magenta  | yellow  | white<br/>
            
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; print flow control:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
            
                   cl:       clear console<br/>
                   br:       line break<br/>
                   bkcr:     backup cursor pos<br/>
                   rscr:     restore cursor pos<br/>
                   crx=:     set cursor left<br/>
                   cry=:     set cursor top<br/>
             
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; app control:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             
                   exit: exit<br/>
             
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; scripts engines:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             
                   exec: exec csharp from text<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; text decoration (vt100):<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             
                   uon:      underline on<br/>
                   invon:    inverted text on<br/>
                   tdoff:    text decoration off<br/>
                   lion:     low intensity<br/>
                   blon:     blink on<br/>
                   bon:      bold on<br/>
             
             </para>
             <para>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>
             &#128313; Unicode characters:<br/>
             &#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;&#9473;<br/>    
             Lire<br/>
             Yen<br/>
             None<br/>
             ARet<br/>
             Demi<br/>
             Quar<br/>
             ThreeQuar<br/>
             DoubleExclam<br/>
             Exp1<br/>
             Exp2<br/>
             Exp3<br/>
             ExpRelease<br/>
             Copyright<br/>
             AE<br/>
             AESmall<br/>
             Bull<br/>
             ArrowThickUp<br/>
             ArrowThickDown<br/>
             ArrowThickLeft<br/>
             ArrowThickRight<br/>
             ArrowUp<br/>
             ArrowRight<br/>
             ArrowDown<br/>
             ArrowLeftRight<br/>
             ArrowUpDown<br/>
             ArrowUpDownUnderline<br/>
             MoreOrLess<br/>
             CornerBottomLeft<br/>
             BarSmallDottedVertical<br/>
             LeftChevron<br/>
             RightChevron<br/>
             EdgeFlatTopRight<br/>
             BarHorizontal<br/>
             BarVertical<br/>
             EdgeTopLeft<br/>
             EdgeTopRight<br/>
             EdgeBottomLeft<br/>
             EdgeBottomRight<br/>
             EdgeRowLeft<br/>
             EdgeRowRight<br/>
             EdgeColTop<br/>
             EdgeColBottom<br/>
             EdgeRowColCross<br/>
             BarDoubleThickHorizontal<br/>
             BarDoubleHorizontal<br/>
             BarDoubleVertical<br/>
             EdgeDoubleTopLeft<br/>
             EdgeDoubleTopRight<br/>
             EdgeDoubleBottomLeft<br/>
             EdgeDoubleBottomRight<br/>
             EdgeDoubleRowLeft<br/>
             EdgeDoubleRowRight<br/>
             EdgeDoubleColTop<br/>
             EdgeDoubleColBottom<br/>
             EdgeDoubleRowColCross<br/>
             BoxHalfBottom<br/>
             BoxHalfTop<br/>
             Box<br/>
             BoxQuarLight<br/>
             BoxTierLight<br/>
             BoxHalfLight<br/>
             CardPic<br/>
             CardTrefl<br/>
             CardArt<br/>
             CardCarro<br/>
             </para>
             <para>
             &#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;<br/>
             &#128309; echo directives global syntax:<br/>
             &#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;&#175;<br/>
                 commandBlockBegin command commandValueAssignationChar value (commandSeparatorChar command commandValueAssignationChar value) commandBlockEnd<br/>
                 commandBlockBegin := (<br/>
                 commandBlockEnd := )<br/>
                 commandValueAssignationChar := =<br/>
                 commandSeparatorChar := ,<br/>
                 value := string_without_CommandBlockBegin_and_CommandBlockEnd) | ( codeBlockBegin any codeBlockEnd )<br/>
                 any := string<br/>
                 odeBlockBegin ::= [[<br/>
                 codeBlockEnd ::= ]]<br/>
                 syntactic elements can be changed for convenience &amp; personal preference<br/>
             </para>
             </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.ESC">
            <summary>
            ESC (char 27d)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CRLF">
            <summary>
            new line (depends on environment)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CSI">
            <summary>
            Control Sequence Introducer
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.DECSC">
            <summary>
            backup cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.DECRC">
            <summary>
            restore cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.RIS">
            <summary>
            Triggers a full reset of the terminal
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.RSTXTA">
            <summary>
            RESET TEXT ATTRIBUTES (hack)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.RSCOLDEF">
            <summary>
            reset terminal colors
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CUU">
            <summary>
            Cursor up
            </summary>        
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CUD">
            <summary>
            Cursor Down
            </summary>      
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CUF">
            <summary>
            Cursor Forward
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CUB">
            <summary>
            Cursor Back
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CNL">
            <summary>
            Cursor Next Line
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CPL">
            <summary>
            Cursor Previous Line
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CHA">
            <summary>
            Cursor Horizontal Absolute
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.CUP">
            <summary>
            Cursor Position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SU">
            <summary>
            Scroll Up
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SD">
            <summary>
            Scroll Down
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.DSR">
            <summary>
            Device Status Report - Reports the cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.ED">
            <summary>
            Erases part of the screen
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.EL">
            <summary>
            Erases part of the line
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_Reset">
            <summary>
            Reset / Normal - All attributes off
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_IncreasedIntensity">
            <summary>
            Bold or increased intensity
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_DecreaseIntensity">
            <summary>
            Faint or decreased intensity
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_SlowBlink">
            <summary>
            Slow Blink
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_RapidBlink">
            <summary>
            Rapid Blink
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_ReverseVideo" -->
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_ItalicOff">
            <summary>
            Italic off
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_UnderlineOff">
             <summary>
            Underline off
             </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_BlinkOff">
            <summary>
            BlinkOff
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_ReverseOff">
            <summary>
            ReverseOff
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_NotCrossedOut">
            <summary>
            NotCrossedOut
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_CrossedOut">
            <summary>
            CrossedOut
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_DoubleUnderline">
            <summary>
            DoubleUnderline
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGR_NormalIntensity">
            <summary>
            NormalIntensity
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRF" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRF8" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRF24" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRB" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRB8" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.SGRB24" -->
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.bkf">
            <summary>
            backup foreground in the shell backup memory
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.bkb">
            <summary>
            backup background in the shell backup memory
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.rsf">
            <summary>
            restore foreground from the shell default foreground setting
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.rsb">
            <summary>
            restore background from shell default background setting
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.rdc">
            <summary>
            set colors to defaults from shell  default foreground and background colors
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.f">
            <summary>
            set foreground from 4 bits palette : f=red (from ConsoleColor not case sensitive values)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.f8" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.f24" -->
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.b">
            <summary>
            set background from 4 bits palette  : b=red (from ConsoleColor not case sensitive values)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.b8" -->
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.EchoDirective.EchoDirectives.b24" -->
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.df">
             <summary>
             set default foreground : assign the shell default foreground memory
            <para>set the system console foreground</para>
             </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.db">
            <summary>
            set default background : assign the shell default background memory
            <para>set the system console background</para>
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.br">
            <summary>
            line break - @Uses ConsoleTextWrapper.LineBreak
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cls">
            <summary>
            clear screen - @Uses ConsoleTextWriterWrapper
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.fillright">
            <summary>
            fill current line to the right - shell impl. (@TODO: remove)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.clright">
            <summary>
            clear line from cursor right - @[K
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.clleft">
            <summary>
            clear line from cursor left - @[1K
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cl">
            <summary>
            clear entire line - @[2K
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.inf">
            <summary>
            infos about console
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.exit">
            <summary>
            exit the current process
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.exec">
            <summary>
            exec csharp code from text
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.bkcr">
            <summary>
            backup cursor pos in shell memory - @Uses system console cursor position
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.rscr">
            <summary>
            restore cursor pos from shell memory - @Uses @2J@[{top+1};{left+1})H
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.crh">
            <summary>
            hide cursor - @Uses system console
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.crs">
            <summary>
            show cursor - @Uses system console
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.crx">
            <summary>
            set cursor left (x) - @Uses @[{x+1}G (get @uses system console)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cry">
            <summary>
            set cursor top (y) - @Uses @2J@[{top+1};{left+1})H [@TODO: avoid also set X !!!!] (get @uses system console)
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cup">
            <summary>
            cursor up - @[1A
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cdown">
            <summary>
            cursor down - @[1B
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cleft">
            <summary>
            cursor left - @[1D
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cright">
            <summary>
            cursor right- @[1C
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cnup">
            <summary>
            cursor n lines up - @[1{n}A 
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cndown">
            <summary>
            cursor n lines down - @[{n}B
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cnleft">
            <summary>
            cursor n cells left - @[{n}D
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.cnright">
            <summary>
            cursor n cells right- @[{n}C
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.chome">
            <summary>
            cursor home (top left 0,0) - @[H
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.uon">
            <summary>
            underline on - sgr
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.bon">
            <summary>
            bold on - sgr
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.blon">
            <summary>
            blink on - sgr
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.invon">
            <summary>
            invert/reverse on - sgr
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.lion">
            <summary>
            light colors - sgr
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.EchoDirective.EchoDirectives.tdoff">
            <summary>
            text decoration off - sgr
            </summary>
        </member>
        <member name="T:OrbitalShell.Component.EchoDirective.Shortcuts">
            <summary>
            shortcuts to echo directives commands
            <para>
            naming conventions:<br/>
            &#9889; echo directive commands shortcuts are CamelCase<br/>
            </para>
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Parser.ANSI.ANSIParser.GetTextLength(System.String)">
            <summary>
            get the real length of the text without ansi sequences non printed characters
            </summary>
            <param name="s">text to be analyzed</param>
            <returns>length of visible part of the text</returns>
        </member>
        <member name="M:OrbitalShell.Component.Parser.ANSI.ANSIParser.GetText(System.String)">
            <summary>
            gets the text part of the syntactic elements
            </summary>
            <param name="s">text to be analyzed</param>
            <returns>string without ansi sequences</returns>
        </member>
        <member name="M:OrbitalShell.Component.Parser.ANSI.ANSIParser.StartsWithANSISequence(System.String,OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.SyntacticBlockList@)">
            <summary>
            indicates wether or not a string starts with a known ansi sequence. the parsed syntax is assigned in the out parameter 'syntax'
            </summary>
            <param name="s">text to be parsed</param>
            <param name="syntax">parsed syntax</param>
            <returns>true if the given text starts with a known ansi sequence.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.NonRecursiveFunctionGrammarParser.SCF" -->
        <member name="F:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.NonRecursiveFunctionGrammarParser.CHAR">
            <summary>
            CHAR
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.NonRecursiveFunctionGrammarParser.TEXT">
            <summary>
            CHAR*
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.NonRecursiveFunctionGrammarParser.NUMLIST">
            <summary>
            (NUM? ;?)*
            </summary>
        </member>
        <member name="F:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.NonRecursiveFunctionGrammarParser.NUM">
            <summary>
            [0-9]+
            </summary>
        </member>
        <member name="M:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.SyntacticBlockList.GetTextLength">
            <summary>
            get the real length of the text without ansi sequences non printed characters
            </summary>
            <returns>length of visible part of the text</returns>
        </member>
        <member name="M:OrbitalShell.Component.Parser.NonRecursiveFunctionalGrammar.SyntacticBlockList.GetText">
            <summary>
            gets the text part of the syntactic elements
            </summary>
            <returns>string without ansi sequences</returns>
        </member>
        <member name="T:OrbitalShell.Component.Script.CSharpScriptEngine">
            <summary>
            c# script engine
            </summary>
        </member>
        <member name="T:OrbitalShell.Console">
            <summary>
            dotnet core sdk helps build fastly nice console applications
            <para>
            slowness due to:
            - many system calls on both linux (ConsolePal.Unix.cs) and windows (ConsolePal.Windows.cs)
            - the .net core make use of interop for each console method call in windows (ConsolePal.Windows.cs)
            </para>
            </summary>
        </member>
        <member name="M:OrbitalShell.Console.Exit(System.Int32)">
            <summary>
            terminates current process
            </summary>
            <param name="r">return code</param>
        </member>
        <member name="F:OrbitalShell.Console.AvoidConsoleAutoLineBreakAtEndOfLine">
            <summary>
            this setting limit wide of lines (available width -1) to prevent sys console to automatically put a line break when reaching end of line (console bug ?)
            </summary>
        </member>
        <member name="P:OrbitalShell.Console.IsConsoleGeometryEnabled">
            <summary>
            true until the contrary is detected (exception in GetCoords : sc.WindowLeft)
            </summary>
        </member>
        <member name="M:OrbitalShell.Console.CheckConsoleHasGeometry">
            <summary>
            update the IsConsoleGeometryEnabled field
            </summary>
            <returns>value of the field</returns>
        </member>
        <member name="T:OrbitalShell.Lib.EventArgs`1">
            <summary>
            generic event args + IsCanceled information
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OrbitalShell.Lib.Process.ProcessCounter">
            <summary>
            process counter usable with ProcessWrapper
            </summary>
        </member>
        <member name="T:OrbitalShell.Lib.Process.ProcessWrapper">
            <summary>
            process wrapper
            </summary>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.WaitForExit(System.Action)">
            <summary>
            wait for the end of the process (that must be running) and then called the callback action if not null
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.WaitForExitGetExitCode(System.Action{System.Int32})">
            <summary>
            wait for the end of the process (that must be running) and then called the callback action if not null
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.Run(System.String,System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            build a process wrapper that wraps a process runned within the provided command line arguments
            </summary>
            <param name="CommandLine"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.Run(System.Diagnostics.ProcessStartInfo)">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.ThreadRun(System.Diagnostics.ProcessStartInfo,OrbitalShell.Lib.Process.ProcessCounter)">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos in a separated thread that wait the process end and then call the callback function if not null
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.ThreadRun(System.Diagnostics.ProcessStartInfo,OrbitalShell.Lib.Process.ProcessCounter,System.Action,System.Action{System.String},System.Action{System.String})">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos in a separated thread that wait the process end and then call the callback function if not null
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.ThreadRun(System.Diagnostics.ProcessStartInfo,OrbitalShell.Lib.Process.ProcessCounter,System.Action{System.String},System.Action{System.String})">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos in a separated thread that wait the process end and then call the callback function if not null
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.ThreadRunWaitAndReturnExitCode(System.Diagnostics.ProcessStartInfo,OrbitalShell.Lib.Process.ProcessCounter,System.Action,System.Action{System.String},System.Action{System.String})">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos in a separated thread that wait the process end and then call the callback function if not null
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.ThreadRunGetExitCode(System.Diagnostics.ProcessStartInfo,OrbitalShell.Lib.Process.ProcessCounter,System.Action{System.Int32},System.Action{System.String},System.Action{System.String})">
            <summary>
            build a process wrapper that wraps a process runned within the provided process start infos in a separated thread that wait the process end and then call the callback function if not null
            </summary>
            <param name="psi"></param>
            <returns></returns>
        </member>
        <member name="M:OrbitalShell.Lib.Process.ProcessWrapper.InitPSI(System.Diagnostics.ProcessStartInfo)">
            <summary>
            init a PSI from default values
            </summary>
        </member>
        <member name="F:OrbitalShell.Lib.Str.DumpNullStringAsText">
            <summary>
            null output fallback
            </summary>
        </member>
        <member name="M:OrbitalShell.Lib.Str.MatchWildcard(System.String,System.String,System.Boolean)">
            <summary>
            indicates if a string match one with wildcards<br/>
            author: PrzemekBenz https://www.codeproject.com/script/Membership/View.aspx?mid=629898<br/>
            from: https://www.codeproject.com/tips/57304/use-wildcard-characters-and-to-compare-strings<br/> 
            licence: CPOL 27/7/2017<br/>
            </summary>        
            <param name="pattern">wildcard pattern string</param>
            <param name="input">string to check if match</param>
            <param name="ignoreCase">ignore case if true</param>
            <returns>true if string match, false otherwise</returns>
        </member>
        <member name="T:OrbitalShell.Lib.StrExt">
            <summary>
            string util extensions methods
            </summary>
        </member>
        <member name="M:OrbitalShell.Lib.StrExt.Contains(System.String,System.Collections.Generic.List{System.Char})">
            <summary>
            indicates if the string contains at least one of the characters
            </summary>
            <param name="s">string</param>
            <param name="chars">chars list</param>
            <returns></returns>
        </member>
        <member name="T:OrbitalShell.Lib.TargetPlatform">
            <summary>
            based on System.Runtime.RuntimeEnvironment
            </summary>
        </member>
        <member name="M:OrbitalShell.Lib.TextFileReader.ReadAllLines(System.String)">
            <summary>
            read all lines of a text file, according to detected eol symbol after any eventual eol symbols clean up
            <para>use default file encoding</para>
            </summary>
            <param name="path"></param>
            <returns>(text of the file splited into lines,eol symbol plateform style name,detected eol symbol</returns>
        </member>
        <member name="T:OrbitalShell.Lib.TypesExt">
            <summary>
            types extension methods
            </summary>
        </member>
        <member name="M:OrbitalShell.Lib.TypesExt.Clone``1(``0)">
            <summary>
            surface clone
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="obj">object to clone</param>
            <returns>the clone</returns>
        </member>
        <member name="T:OrbitalShell.Lib.TypesManglingExt">
            <summary>
            types names mangling extensions<br/>
            from: https://www.codeproject.com/Tips/621812/User-friendly-names-for-Types<br/>
            author: Dennis E https://www.codeproject.com/Members/User-5049496<br/>
            under Licence CPOL <br/>   
            released 16/7/2013<br/>
            </summary>
        </member>
        <member name="T:OrbitalShell_ConsoleApp.Component.Settings.SettingsBuilder">
            <summary>
            TODO : settings builder pattern (fluent design)
            </summary>
        </member>
    </members>
</doc>
